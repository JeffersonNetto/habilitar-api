// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Habilitar.Core.Models;

#nullable disable

namespace Habilitar.Infra.Data
{
    public partial class HabilitarContext : DbContext
    {
        public HabilitarContext()
        {
        }

        public HabilitarContext(DbContextOptions<HabilitarContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<Exercicio> Exercicio { get; set; }
        public virtual DbSet<ExercicioGrupo> ExercicioGrupo { get; set; }
        public virtual DbSet<ExercicioMetrica> ExercicioMetrica { get; set; }
        public virtual DbSet<Grupo> Grupo { get; set; }
        public virtual DbSet<Intervalo> Intervalo { get; set; }
        public virtual DbSet<LogAcesso> LogAcesso { get; set; }
        public virtual DbSet<LogErro> LogErro { get; set; }
        public virtual DbSet<Meta> Meta { get; set; }
        public virtual DbSet<Metrica> Metrica { get; set; }
        public virtual DbSet<PacienteMeta> PacienteMeta { get; set; }
        public virtual DbSet<PacienteMetaDiaria> PacienteMetaDiaria { get; set; }
        public virtual DbSet<PacienteMetaDiariaLog> PacienteMetaDiariaLog { get; set; }
        public virtual DbSet<Pessoa> Pessoa { get; set; }
        public virtual DbSet<Unidade> Unidade { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Empresa>(entity =>
            {
                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Empresa_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Empresa_UsuarioCriacaoId");

                entity.Property(e => e.Cnpj)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NomeFantasia)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.RazaoSocial)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Exercicio>(entity =>
            {
                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Exercicio_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Exercicio_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NomePopular)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExercicioGrupo>(entity =>
            {
                entity.HasKey(e => new { e.ExercicioId, e.GrupoId });

                entity.HasIndex(e => e.GrupoId, "IX_ExercicioGrupo_GrupoId");

                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_ExercicioGrupo_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_ExercicioGrupo_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Exercicio)
                    .WithMany(p => p.ExercicioGrupo)
                    .HasForeignKey(d => d.ExercicioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExercicioGrupo_Exercicio");

                entity.HasOne(d => d.Grupo)
                    .WithMany(p => p.ExercicioGrupo)
                    .HasForeignKey(d => d.GrupoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExercicioGrupo_Grupo");
            });

            modelBuilder.Entity<ExercicioMetrica>(entity =>
            {
                entity.HasKey(e => new { e.ExercicioId, e.MetricaId });

                entity.HasIndex(e => e.MetricaId, "IX_ExercicioMetrica_MetricaId");

                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_ExercicioMetrica_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_ExercicioMetrica_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Exercicio)
                    .WithMany(p => p.ExercicioMetrica)
                    .HasForeignKey(d => d.ExercicioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExercicioMetrica_Exercicio");

                entity.HasOne(d => d.Metrica)
                    .WithMany(p => p.ExercicioMetrica)
                    .HasForeignKey(d => d.MetricaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExercicioMetrica_Metrica");
            });

            modelBuilder.Entity<Grupo>(entity =>
            {
                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Grupo_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Grupo_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observacao)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Intervalo>(entity =>
            {
                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Intervalo_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Intervalo_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogAcesso>(entity =>
            {
                entity.HasIndex(e => e.UsuarioId, "IX_LogAcesso_UsuarioId");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogErro>(entity =>
            {
                entity.HasIndex(e => e.UsuarioId, "IX_LogErro_UsuarioId");

                entity.Property(e => e.Acao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Erro)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tela)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Meta>(entity =>
            {
                entity.HasIndex(e => e.EmpresaId, "IX_Meta_EmpresaId");

                entity.HasIndex(e => e.ExercicioId, "IX_Meta_ExercicioId");

                entity.HasIndex(e => e.FisioterapeutaId, "IX_Meta_FisioterapeutaId");

                entity.HasIndex(e => e.IntervaloId, "IX_Meta_IntervaloId");

                entity.HasIndex(e => e.MetricaId, "IX_Meta_MetricaId");

                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Meta_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Meta_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.Meta)
                    .HasForeignKey(d => d.EmpresaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meta_Empresa");

                entity.HasOne(d => d.Exercicio)
                    .WithMany(p => p.Meta)
                    .HasForeignKey(d => d.ExercicioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meta_Exercicio");

                entity.HasOne(d => d.Intervalo)
                    .WithMany(p => p.Meta)
                    .HasForeignKey(d => d.IntervaloId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meta_Intervalo");

                entity.HasOne(d => d.Metrica)
                    .WithMany(p => p.Meta)
                    .HasForeignKey(d => d.MetricaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Meta_Metrica");
            });

            modelBuilder.Entity<Metrica>(entity =>
            {
                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Metrica_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Metrica_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observacao)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Sigla)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PacienteMeta>(entity =>
            {
                entity.HasIndex(e => e.ExercicioId, "IX_PacienteMeta_ExercicioId");

                entity.HasIndex(e => e.FisioterapeutaId, "IX_PacienteMeta_FisioterapeutaId");

                entity.HasIndex(e => e.IntervaloId, "IX_PacienteMeta_IntervaloId");

                entity.HasIndex(e => e.MetaId, "IX_PacienteMeta_MetaId");

                entity.HasIndex(e => e.MetricaId, "IX_PacienteMeta_MetricaId");

                entity.HasIndex(e => e.PessoaId, "IX_PacienteMeta_PessoaId");

                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_PacienteMeta_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_PacienteMeta_UsuarioCriacaoId");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.DataFinal).HasColumnType("date");

                entity.Property(e => e.DataInicial).HasColumnType("date");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Exercicio)
                    .WithMany(p => p.PacienteMeta)
                    .HasForeignKey(d => d.ExercicioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacienteMeta_Exercicio");

                entity.HasOne(d => d.Intervalo)
                    .WithMany(p => p.PacienteMeta)
                    .HasForeignKey(d => d.IntervaloId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacienteMeta_Intervalo");

                entity.HasOne(d => d.Meta)
                    .WithMany(p => p.PacienteMeta)
                    .HasForeignKey(d => d.MetaId)
                    .HasConstraintName("FK_PacienteMeta_Meta");

                entity.HasOne(d => d.Metrica)
                    .WithMany(p => p.PacienteMeta)
                    .HasForeignKey(d => d.MetricaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacienteMeta_Metrica");

                entity.HasOne(d => d.Pessoa)
                    .WithMany(p => p.PacienteMeta)
                    .HasForeignKey(d => d.PessoaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacienteMeta_Pessoa");
            });

            modelBuilder.Entity<PacienteMetaDiaria>(entity =>
            {
                entity.HasIndex(e => e.PacienteMetaId, "IX_PacienteMetaDiaria_PacienteMetaId");

                entity.Property(e => e.Data).HasColumnType("date");

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.PacienteMeta)
                    .WithMany(p => p.PacienteMetaDiaria)
                    .HasForeignKey(d => d.PacienteMetaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacienteMetaDiaria_PacienteMeta");
            });

            modelBuilder.Entity<PacienteMetaDiariaLog>(entity =>
            {
                entity.HasIndex(e => e.PacienteMetaDiariaId, "IX_PacienteMetaDiariaLog_PacienteMetaDiariaId");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.PacienteMetaDiaria)
                    .WithMany(p => p.PacienteMetaDiariaLog)
                    .HasForeignKey(d => d.PacienteMetaDiariaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacienteMetaDiariaLog_PacienteMetaDiaria");
            });

            modelBuilder.Entity<Pessoa>(entity =>
            {
                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Pessoa_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Pessoa_UsuarioCriacaoId");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.DataNascimento).HasColumnType("date");

                entity.Property(e => e.IntegracaoId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sobrenome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Unidade>(entity =>
            {
                entity.HasIndex(e => e.EmpresaId, "IX_Unidade_EmpresaId");

                entity.HasIndex(e => e.UsuarioAtualizacaoId, "IX_Unidade_UsuarioAtualizacaoId");

                entity.HasIndex(e => e.UsuarioCriacaoId, "IX_Unidade_UsuarioCriacaoId");

                entity.Property(e => e.Cnes)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DataAtualizacao).HasColumnType("datetime");

                entity.Property(e => e.DataCriacao).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Telefone)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.HasOne(d => d.Empresa)
                    .WithMany(p => p.Unidade)
                    .HasForeignKey(d => d.EmpresaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Unidade_Empresa");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}