// <auto-generated />
using System;
using Habilitar.Infra.Data;
using Habilitar.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Habilitar.Api.Migrations
{
    [DbContext(typeof(HabilitarContext))]
    [Migration("20210410165936_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomePopular")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Exercicio");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioGrupo", b =>
                {
                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("ExercicioId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("ExercicioGrupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioMetrica", b =>
                {
                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("ExercicioId", "MetricaId");

                    b.HasIndex("MetricaId");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("ExercicioMetrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Funcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Funcao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("Observacao")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Intervalo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LogAcesso");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogErro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Erro")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tela")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LogErro");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int?>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<short>("IntervaloId")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("QtdSeries")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("FisioterapeutaId");

                    b.HasIndex("IntervaloId");

                    b.HasIndex("MetricaId");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Sigla")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("date");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<short>("IntervaloId")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MetaId")
                        .HasColumnType("int");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<int>("QtdSeries")
                        .HasColumnType("int");

                    b.Property<bool>("QuartaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("QuintaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<bool>("SegundaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("SextaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("TercaFeira")
                        .HasColumnType("bit");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("FisioterapeutaId");

                    b.HasIndex("IntervaloId");

                    b.HasIndex("MetaId");

                    b.HasIndex("MetricaId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("PacienteMetaId")
                        .HasColumnType("int");

                    b.Property<int?>("QtdRealizado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteMetaId");

                    b.ToTable("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiariaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PacienteMetaDiariaId")
                        .HasColumnType("int");

                    b.Property<int>("QtdRealizado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteMetaDiariaId");

                    b.ToTable("PacienteMetaDiariaLog");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PerfilFuncao", b =>
                {
                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<int>("FuncaoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("PerfilId", "FuncaoId");

                    b.HasIndex("FuncaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("PerfilFuncao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IntegracaoId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cnes")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioAtualizacaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Unidade");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Conselho")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<bool>("Fisioterapeuta")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PessoaId")
                        .HasColumnType("int");

                    b.Property<bool>("Profissional")
                        .HasColumnType("bit");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioAtualizacaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Habilitar.Core.Models.UsuarioPerfil", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "PerfilId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("UsuarioPerfil");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("EmpresaUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Empresa_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("EmpresaUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Empresa_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("ExercicioUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Exercicio_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("ExercicioUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Exercicio_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioGrupo", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("ExercicioGrupo")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_ExercicioGrupo_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Grupo", "Grupo")
                        .WithMany("ExercicioGrupo")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("FK_ExercicioGrupo_Grupo")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("ExercicioGrupoUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_ExercicioGrupo_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("ExercicioGrupoUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_ExercicioGrupo_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Grupo");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioMetrica", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("ExercicioMetrica")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_ExercicioMetrica_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("ExercicioMetrica")
                        .HasForeignKey("MetricaId")
                        .HasConstraintName("FK_ExercicioMetrica_Metrica")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("ExercicioMetricaUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_ExercicioMetrica_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("ExercicioMetricaUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_ExercicioMetrica_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Metrica");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Funcao", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("FuncaoUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Funcao_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("FuncaoUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Funcao_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("GrupoUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Grupo_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("GrupoUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Grupo_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("IntervaloUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Intervalo_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("IntervaloUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Intervalo_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogAcesso", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "Usuario")
                        .WithMany("LogAcesso")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_LogAcesso_Usuario")
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogErro", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "Usuario")
                        .WithMany("LogErro")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_LogErro_Usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Empresa", "Empresa")
                        .WithMany("Meta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Meta_Empresa")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("Meta")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_Meta_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "Fisioterapeuta")
                        .WithMany("MetaFisioterapeuta")
                        .HasForeignKey("FisioterapeutaId")
                        .HasConstraintName("FK_Meta_Fisioterapeuta");

                    b.HasOne("Habilitar.Core.Models.Intervalo", "Intervalo")
                        .WithMany("Meta")
                        .HasForeignKey("IntervaloId")
                        .HasConstraintName("FK_Meta_Intervalo")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("Meta")
                        .HasForeignKey("MetricaId")
                        .HasConstraintName("FK_Meta_Metrica")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("MetaUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Meta_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("MetaUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Meta_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Exercicio");

                    b.Navigation("Fisioterapeuta");

                    b.Navigation("Intervalo");

                    b.Navigation("Metrica");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("MetricaUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Metrica_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("MetricaUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Metrica_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_PacienteMeta_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "Fisioterapeuta")
                        .WithMany("PacienteMetaFisioterapeuta")
                        .HasForeignKey("FisioterapeutaId")
                        .HasConstraintName("FK_PacienteMeta_Usuario")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Intervalo", "Intervalo")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("IntervaloId")
                        .HasConstraintName("FK_PacienteMeta_Intervalo")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Meta", "Meta")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("MetaId")
                        .HasConstraintName("FK_PacienteMeta_Meta");

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("MetricaId")
                        .HasConstraintName("FK_PacienteMeta_Metrica")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Pessoa", "Pessoa")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("PessoaId")
                        .HasConstraintName("FK_PacienteMeta_Pessoa")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("PacienteMetaUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_PacienteMeta_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("PacienteMetaUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_PacienteMeta_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Fisioterapeuta");

                    b.Navigation("Intervalo");

                    b.Navigation("Meta");

                    b.Navigation("Metrica");

                    b.Navigation("Pessoa");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.HasOne("Habilitar.Core.Models.PacienteMeta", "PacienteMeta")
                        .WithMany("PacienteMetaDiaria")
                        .HasForeignKey("PacienteMetaId")
                        .HasConstraintName("FK_PacienteMetaDiaria_PacienteMeta")
                        .IsRequired();

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiariaLog", b =>
                {
                    b.HasOne("Habilitar.Core.Models.PacienteMetaDiaria", "PacienteMetaDiaria")
                        .WithMany("PacienteMetaDiariaLog")
                        .HasForeignKey("PacienteMetaDiariaId")
                        .HasConstraintName("FK_PacienteMetaDiariaLog_PacienteMetaDiaria")
                        .IsRequired();

                    b.Navigation("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Perfil", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("PerfilUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Perfil_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("PerfilUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Perfil_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PerfilFuncao", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Funcao", "Funcao")
                        .WithMany("PerfilFuncao")
                        .HasForeignKey("FuncaoId")
                        .HasConstraintName("FK_PerfilFuncao_Funcao")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Perfil", "Perfil")
                        .WithMany("PerfilFuncao")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("FK_PerfilFuncao_Perfil")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("PerfilFuncao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_PerfilFuncao_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("Funcao");

                    b.Navigation("Perfil");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Pessoa", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("PessoaUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Pessoa_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("PessoaUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Pessoa_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Empresa", "Empresa")
                        .WithMany("Unidade")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Unidade_Empresa")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioAtualizacao")
                        .WithMany("UnidadeUsuarioAtualizacao")
                        .HasForeignKey("UsuarioAtualizacaoId")
                        .HasConstraintName("FK_Unidade_UsuarioAtualizacao");

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("UnidadeUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_Unidade_UsuarioCriacao")
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("UsuarioAtualizacao");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Usuario", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Pessoa", "Pessoa")
                        .WithMany("Usuario")
                        .HasForeignKey("PessoaId")
                        .HasConstraintName("FK_Usuario_Pessoa");

                    b.HasOne("Habilitar.Core.Models.Unidade", "Unidade")
                        .WithMany("Usuario")
                        .HasForeignKey("UnidadeId")
                        .HasConstraintName("FK_Usuario_Unidade");

                    b.Navigation("Pessoa");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("Habilitar.Core.Models.UsuarioPerfil", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Perfil", "Perfil")
                        .WithMany("UsuarioPerfil")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("FK_UsuarioPerfil_Perfil")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "UsuarioCriacao")
                        .WithMany("UsuarioPerfilUsuarioCriacao")
                        .HasForeignKey("UsuarioCriacaoId")
                        .HasConstraintName("FK_UsuarioPerfil_UsuarioCriacao")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Usuario", "Usuario")
                        .WithMany("UsuarioPerfilUsuario")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_UsuarioPerfil_Usuario")
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.Navigation("Meta");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.Navigation("ExercicioGrupo");

                    b.Navigation("ExercicioMetrica");

                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Funcao", b =>
                {
                    b.Navigation("PerfilFuncao");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.Navigation("ExercicioGrupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.Navigation("ExercicioMetrica");

                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.Navigation("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.Navigation("PacienteMetaDiariaLog");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Perfil", b =>
                {
                    b.Navigation("PerfilFuncao");

                    b.Navigation("UsuarioPerfil");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Pessoa", b =>
                {
                    b.Navigation("PacienteMeta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Usuario", b =>
                {
                    b.Navigation("EmpresaUsuarioAtualizacao");

                    b.Navigation("EmpresaUsuarioCriacao");

                    b.Navigation("ExercicioGrupoUsuarioAtualizacao");

                    b.Navigation("ExercicioGrupoUsuarioCriacao");

                    b.Navigation("ExercicioMetricaUsuarioAtualizacao");

                    b.Navigation("ExercicioMetricaUsuarioCriacao");

                    b.Navigation("ExercicioUsuarioAtualizacao");

                    b.Navigation("ExercicioUsuarioCriacao");

                    b.Navigation("FuncaoUsuarioAtualizacao");

                    b.Navigation("FuncaoUsuarioCriacao");

                    b.Navigation("GrupoUsuarioAtualizacao");

                    b.Navigation("GrupoUsuarioCriacao");

                    b.Navigation("IntervaloUsuarioAtualizacao");

                    b.Navigation("IntervaloUsuarioCriacao");

                    b.Navigation("LogAcesso");

                    b.Navigation("LogErro");

                    b.Navigation("MetaFisioterapeuta");

                    b.Navigation("MetaUsuarioAtualizacao");

                    b.Navigation("MetaUsuarioCriacao");

                    b.Navigation("MetricaUsuarioAtualizacao");

                    b.Navigation("MetricaUsuarioCriacao");

                    b.Navigation("PacienteMetaFisioterapeuta");

                    b.Navigation("PacienteMetaUsuarioAtualizacao");

                    b.Navigation("PacienteMetaUsuarioCriacao");

                    b.Navigation("PerfilFuncao");

                    b.Navigation("PerfilUsuarioAtualizacao");

                    b.Navigation("PerfilUsuarioCriacao");

                    b.Navigation("PessoaUsuarioAtualizacao");

                    b.Navigation("PessoaUsuarioCriacao");

                    b.Navigation("UnidadeUsuarioAtualizacao");

                    b.Navigation("UnidadeUsuarioCriacao");

                    b.Navigation("UsuarioPerfilUsuario");

                    b.Navigation("UsuarioPerfilUsuarioCriacao");
                });
#pragma warning restore 612, 618
        }
    }
}
