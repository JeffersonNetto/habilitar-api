// <auto-generated />
using System;
using Habilitar.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Habilitar.Infra.Migrations
{
    [DbContext(typeof(HabilitarContext))]
    [Migration("20210506165031_Atualizacao")]
    partial class Atualizacao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomePopular")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Exercicio");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioGrupo", b =>
                {
                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExercicioId", "GrupoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("ExercicioGrupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioMetrica", b =>
                {
                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExercicioId", "MetricaId");

                    b.HasIndex("MetricaId");

                    b.ToTable("ExercicioMetrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Intervalo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LogAcesso");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogErro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Erro")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tela")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LogErro");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int?>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<short>("IntervaloId")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("QtdSeries")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("IntervaloId");

                    b.HasIndex("MetricaId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Sigla")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("date");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<short>("IntervaloId")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MetaId")
                        .HasColumnType("int");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<int>("QtdSeries")
                        .HasColumnType("int");

                    b.Property<bool>("QuartaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("QuintaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<bool>("SegundaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("SextaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("TercaFeira")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("IntervaloId");

                    b.HasIndex("MetaId");

                    b.HasIndex("MetricaId");

                    b.HasIndex("PessoaId");

                    b.ToTable("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("PacienteMetaId")
                        .HasColumnType("int");

                    b.Property<int?>("QtdRealizado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteMetaId");

                    b.ToTable("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiariaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PacienteMetaDiariaId")
                        .HasColumnType("int");

                    b.Property<int>("QtdRealizado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteMetaDiariaId");

                    b.ToTable("PacienteMetaDiariaLog");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("IntegracaoId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cnes")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Unidade");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioGrupo", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("ExercicioGrupo")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_ExercicioGrupo_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Grupo", "Grupo")
                        .WithMany("ExercicioGrupo")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("FK_ExercicioGrupo_Grupo")
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioMetrica", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("ExercicioMetrica")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_ExercicioMetrica_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("ExercicioMetrica")
                        .HasForeignKey("MetricaId")
                        .HasConstraintName("FK_ExercicioMetrica_Metrica")
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Empresa", "Empresa")
                        .WithMany("Meta")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Meta_Empresa")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("Meta")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_Meta_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Intervalo", "Intervalo")
                        .WithMany("Meta")
                        .HasForeignKey("IntervaloId")
                        .HasConstraintName("FK_Meta_Intervalo")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("Meta")
                        .HasForeignKey("MetricaId")
                        .HasConstraintName("FK_Meta_Metrica")
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Exercicio");

                    b.Navigation("Intervalo");

                    b.Navigation("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("ExercicioId")
                        .HasConstraintName("FK_PacienteMeta_Exercicio")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Intervalo", "Intervalo")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("IntervaloId")
                        .HasConstraintName("FK_PacienteMeta_Intervalo")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Meta", "Meta")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("MetaId")
                        .HasConstraintName("FK_PacienteMeta_Meta");

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("MetricaId")
                        .HasConstraintName("FK_PacienteMeta_Metrica")
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.Pessoa", "Pessoa")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("PessoaId")
                        .HasConstraintName("FK_PacienteMeta_Pessoa")
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Intervalo");

                    b.Navigation("Meta");

                    b.Navigation("Metrica");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.HasOne("Habilitar.Core.Models.PacienteMeta", "PacienteMeta")
                        .WithMany("PacienteMetaDiaria")
                        .HasForeignKey("PacienteMetaId")
                        .HasConstraintName("FK_PacienteMetaDiaria_PacienteMeta")
                        .IsRequired();

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiariaLog", b =>
                {
                    b.HasOne("Habilitar.Core.Models.PacienteMetaDiaria", "PacienteMetaDiaria")
                        .WithMany("PacienteMetaDiariaLog")
                        .HasForeignKey("PacienteMetaDiariaId")
                        .HasConstraintName("FK_PacienteMetaDiariaLog_PacienteMetaDiaria")
                        .IsRequired();

                    b.Navigation("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Empresa", "Empresa")
                        .WithMany("Unidade")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Unidade_Empresa")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.Navigation("Meta");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.Navigation("ExercicioGrupo");

                    b.Navigation("ExercicioMetrica");

                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.Navigation("ExercicioGrupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.Navigation("ExercicioMetrica");

                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.Navigation("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.Navigation("PacienteMetaDiariaLog");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Pessoa", b =>
                {
                    b.Navigation("PacienteMeta");
                });
#pragma warning restore 612, 618
        }
    }
}
