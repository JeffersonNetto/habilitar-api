// <auto-generated />
using System;
using Habilitar.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Habilitar.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211206164313_Meta_Descricao")]
    partial class Meta_Descricao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Empresa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Cnpj = "19878404000100",
                            DataCriacao = new DateTime(2021, 12, 6, 13, 43, 13, 63, DateTimeKind.Local).AddTicks(1258),
                            Ip = "localhost",
                            NomeFantasia = "Fundação São Francisco Xavier",
                            RazaoSocial = "Fundação São Francisco Xavier",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Cnpj = "05815928000148",
                            DataCriacao = new DateTime(2021, 12, 6, 13, 43, 13, 63, DateTimeKind.Local).AddTicks(1269),
                            Ip = "localhost",
                            NomeFantasia = "Fisiocenter",
                            RazaoSocial = "Fisiocenter",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Cnpj = "04720047000180",
                            DataCriacao = new DateTime(2021, 12, 6, 13, 43, 13, 63, DateTimeKind.Local).AddTicks(1270),
                            Ip = "localhost",
                            NomeFantasia = "Posturar Clinica de Fisioterapia LTDA",
                            RazaoSocial = "Posturar Clinica de Fisioterapia LTDA",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomePopular")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Exercicio");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioGrupo", b =>
                {
                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.HasKey("ExercicioId", "GrupoId");

                    b.HasIndex(new[] { "GrupoId" }, "IX_ExercicioGrupo_GrupoId");

                    b.ToTable("ExercicioGrupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioMetrica", b =>
                {
                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExercicioId", "MetricaId");

                    b.HasIndex(new[] { "MetricaId" }, "IX_ExercicioMetrica_MetricaId");

                    b.ToTable("ExercicioMetrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Intervalo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LogAcesso");
                });

            modelBuilder.Entity("Habilitar.Core.Models.LogErro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Acao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Erro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LogErro");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<short>("IntervaloId")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("QtdSeries")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExercicioId" }, "IX_Meta_ExercicioId");

                    b.HasIndex(new[] { "IntervaloId" }, "IX_Meta_IntervaloId");

                    b.HasIndex(new[] { "MetricaId" }, "IX_Meta_MetricaId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Sigla")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("date");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.Property<int>("FisioterapeutaId")
                        .HasColumnType("int");

                    b.Property<short>("IntervaloId")
                        .HasColumnType("smallint");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MetaId")
                        .HasColumnType("int");

                    b.Property<short>("MetricaId")
                        .HasColumnType("smallint");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("QtdSeries")
                        .HasColumnType("int");

                    b.Property<bool>("QuartaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("QuintaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<bool>("SegundaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("SextaFeira")
                        .HasColumnType("bit");

                    b.Property<bool>("TercaFeira")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExercicioId" }, "IX_PacienteMeta_ExercicioId");

                    b.HasIndex(new[] { "IntervaloId" }, "IX_PacienteMeta_IntervaloId");

                    b.HasIndex(new[] { "MetaId" }, "IX_PacienteMeta_MetaId");

                    b.HasIndex(new[] { "MetricaId" }, "IX_PacienteMeta_MetricaId");

                    b.HasIndex(new[] { "UserId" }, "IX_PacienteMeta_UserId");

                    b.ToTable("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("MetricaQtd")
                        .HasColumnType("int");

                    b.Property<int>("PacienteMetaId")
                        .HasColumnType("int");

                    b.Property<int?>("QtdRealizado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PacienteMetaId" }, "IX_PacienteMetaDiaria_PacienteMetaId");

                    b.ToTable("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiariaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PacienteMetaDiariaId")
                        .HasColumnType("int");

                    b.Property<int>("QtdRealizado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PacienteMetaDiariaId" }, "IX_PacienteMetaDiariaLog_PacienteMetaDiariaId");

                    b.ToTable("PacienteMetaDiariaLog");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bec17d9-37a0-424e-bdd0-d0302fe407e0"),
                            ConcurrencyStamp = "a7ce78ce-20d2-4558-be7e-43b52aa9125c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("807e1266-cff7-4104-8bf7-d6c5de7568df"),
                            ConcurrencyStamp = "27ec2908-dfae-4a59-88a1-d314745dfef0",
                            Name = "Auxiliar",
                            NormalizedName = "AUXILIAR"
                        },
                        new
                        {
                            Id = new Guid("b15787bc-d1f2-4e8a-a0a4-c0bada40847e"),
                            ConcurrencyStamp = "16a3caf4-4c85-4693-b221-1dd3f2cfc07c",
                            Name = "Fisioterapeuta",
                            NormalizedName = "FISIOTERAPEUTA"
                        },
                        new
                        {
                            Id = new Guid("c9d756ed-24a3-48f7-b9cb-0124d5975239"),
                            ConcurrencyStamp = "74305263-d7c4-44a6-a81a-680ea7d6e535",
                            Name = "Paciente",
                            NormalizedName = "PACIENTE"
                        });
                });

            modelBuilder.Entity("Habilitar.Core.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Cnes")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_Unidade_EmpresaId");

                    b.ToTable("Unidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Cnes = "2440A",
                            DataCriacao = new DateTime(2021, 12, 6, 13, 43, 13, 65, DateTimeKind.Local).AddTicks(1397),
                            Email = "teste@fsfx.com.br",
                            EmpresaId = 1,
                            Ip = "::1",
                            Latitude = "-19.49523868306967",
                            Longitude = "-42.5379800827425",
                            Nome = "HMC I",
                            Telefone = "03138299000",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Cnes = "2440A",
                            DataCriacao = new DateTime(2021, 12, 6, 13, 43, 13, 65, DateTimeKind.Local).AddTicks(1402),
                            Email = "teste@fsfx.com.br",
                            EmpresaId = 1,
                            Ip = "::1",
                            Latitude = "-19.507606869177867",
                            Longitude = "-42.55770305020517",
                            Nome = "HMC II",
                            Telefone = "03138299000",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Habilitar.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("IntegracaoId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Sexo")
                        .HasColumnType("char(1)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UsuarioAtualizacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioGrupo", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("ExercicioGrupo")
                        .HasForeignKey("ExercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_ExercicioGrupo_Exercicio");

                    b.HasOne("Habilitar.Core.Models.Grupo", "Grupo")
                        .WithMany("ExercicioGrupo")
                        .HasForeignKey("GrupoId")
                        .IsRequired()
                        .HasConstraintName("FK_ExercicioGrupo_Grupo");

                    b.Navigation("Exercicio");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.ExercicioMetrica", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("ExercicioMetrica")
                        .HasForeignKey("ExercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_ExercicioMetrica_Exercicio");

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("ExercicioMetrica")
                        .HasForeignKey("MetricaId")
                        .IsRequired()
                        .HasConstraintName("FK_ExercicioMetrica_Metrica");

                    b.Navigation("Exercicio");

                    b.Navigation("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("Meta")
                        .HasForeignKey("ExercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_Meta_Exercicio");

                    b.HasOne("Habilitar.Core.Models.Intervalo", "Intervalo")
                        .WithMany("Meta")
                        .HasForeignKey("IntervaloId")
                        .IsRequired()
                        .HasConstraintName("FK_Meta_Intervalo");

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("Meta")
                        .HasForeignKey("MetricaId")
                        .IsRequired()
                        .HasConstraintName("FK_Meta_Metrica");

                    b.Navigation("Exercicio");

                    b.Navigation("Intervalo");

                    b.Navigation("Metrica");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Exercicio", "Exercicio")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("ExercicioId")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteMeta_Exercicio");

                    b.HasOne("Habilitar.Core.Models.Intervalo", "Intervalo")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("IntervaloId")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteMeta_Intervalo");

                    b.HasOne("Habilitar.Core.Models.Meta", "Meta")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("MetaId")
                        .HasConstraintName("FK_PacienteMeta_Meta");

                    b.HasOne("Habilitar.Core.Models.Metrica", "Metrica")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("MetricaId")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteMeta_Metrica");

                    b.HasOne("Habilitar.Core.Models.User", "User")
                        .WithMany("PacienteMeta")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteMeta_User");

                    b.Navigation("Exercicio");

                    b.Navigation("Intervalo");

                    b.Navigation("Meta");

                    b.Navigation("Metrica");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.HasOne("Habilitar.Core.Models.PacienteMeta", "PacienteMeta")
                        .WithMany("PacienteMetaDiaria")
                        .HasForeignKey("PacienteMetaId")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteMetaDiaria_PacienteMeta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiariaLog", b =>
                {
                    b.HasOne("Habilitar.Core.Models.PacienteMetaDiaria", "PacienteMetaDiaria")
                        .WithMany("PacienteMetaDiariaLog")
                        .HasForeignKey("PacienteMetaDiariaId")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteMetaDiariaLog_PacienteMetaDiaria");

                    b.Navigation("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.RoleClaim", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Habilitar.Core.Models.Unidade", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Empresa", "Empresa")
                        .WithMany("Unidade")
                        .HasForeignKey("EmpresaId")
                        .IsRequired()
                        .HasConstraintName("FK_Unidade_Empresa");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.User", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Empresa", "Empresa")
                        .WithMany("User")
                        .HasForeignKey("EmpresaId");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserClaim", b =>
                {
                    b.HasOne("Habilitar.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserLogin", b =>
                {
                    b.HasOne("Habilitar.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserRole", b =>
                {
                    b.HasOne("Habilitar.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Habilitar.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Habilitar.Core.Models.UserToken", b =>
                {
                    b.HasOne("Habilitar.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Habilitar.Core.Models.Empresa", b =>
                {
                    b.Navigation("Unidade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Exercicio", b =>
                {
                    b.Navigation("ExercicioGrupo");

                    b.Navigation("ExercicioMetrica");

                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Grupo", b =>
                {
                    b.Navigation("ExercicioGrupo");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Intervalo", b =>
                {
                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Meta", b =>
                {
                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.Metrica", b =>
                {
                    b.Navigation("ExercicioMetrica");

                    b.Navigation("Meta");

                    b.Navigation("PacienteMeta");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMeta", b =>
                {
                    b.Navigation("PacienteMetaDiaria");
                });

            modelBuilder.Entity("Habilitar.Core.Models.PacienteMetaDiaria", b =>
                {
                    b.Navigation("PacienteMetaDiariaLog");
                });

            modelBuilder.Entity("Habilitar.Core.Models.User", b =>
                {
                    b.Navigation("PacienteMeta");
                });
#pragma warning restore 612, 618
        }
    }
}
